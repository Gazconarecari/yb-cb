{"ast":null,"code":"var _jsxFileName = \"/Users/guillermoazcona/Desktop/YB/yb-cb/src/pages/Clasificacion.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Clasificacion() {\n  _s();\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      // Paso 1: Ejecutamos una consulta SQL cruda para obtener el promedio\n      const {\n        data: votosData,\n        error: votosError\n      } = await supabase.rpc('get_suma_parametros_por_convocatoria'); // Llamamos a la función SQL\n\n      if (votosError) {\n        console.log('Error obteniendo los votos:', votosError);\n        return;\n      }\n\n      // Paso 2: Relacionar los resultados con la tabla 'users' para obtener el 'username'\n      const {\n        data: usersData,\n        error: usersError\n      } = await supabase.from('users').select('id, username');\n      if (usersError) {\n        console.log('Error obteniendo los usuarios:', usersError);\n        return;\n      }\n\n      // Paso 3: Combinar los datos de votos con los usernames\n      const combinedData = votosData.map(voto => {\n        const user = usersData.find(user => user.id === voto.convocatoria); // Buscamos el username que coincida con el id de la convocatoria\n        return {\n          username: user ? user.username : 'Usuario desconocido',\n          promedio: voto.promedio !== null && voto.promedio !== undefined ? voto.promedio : 0 // Asignar 0 si promedio es undefined o null\n        };\n      });\n      setUsers(combinedData); // Guardamos los resultados en el estado\n    }\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Clasificaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Promedio de Puntuaci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map((user, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.promedio.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Clasificacion, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = Clasificacion;\nexport default Clasificacion;\nvar _c;\n$RefreshReg$(_c, \"Clasificacion\");","map":{"version":3,"names":["useState","useEffect","supabase","jsxDEV","_jsxDEV","Clasificacion","_s","users","setUsers","fetchData","data","votosData","error","votosError","rpc","console","log","usersData","usersError","from","select","combinedData","map","voto","user","find","id","convocatoria","username","promedio","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","index","toFixed","_c","$RefreshReg$"],"sources":["/Users/guillermoazcona/Desktop/YB/yb-cb/src/pages/Clasificacion.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient';\n\nfunction Clasificacion() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      // Paso 1: Ejecutamos una consulta SQL cruda para obtener el promedio\n      const { data: votosData, error: votosError } = await supabase\n        .rpc('get_suma_parametros_por_convocatoria'); // Llamamos a la función SQL\n\n      if (votosError) {\n        console.log('Error obteniendo los votos:', votosError);\n        return;\n      }\n\n      // Paso 2: Relacionar los resultados con la tabla 'users' para obtener el 'username'\n      const { data: usersData, error: usersError } = await supabase\n        .from('users')\n        .select('id, username');\n\n      if (usersError) {\n        console.log('Error obteniendo los usuarios:', usersError);\n        return;\n      }\n\n      // Paso 3: Combinar los datos de votos con los usernames\n      const combinedData = votosData.map(voto => {\n        const user = usersData.find(user => user.id === voto.convocatoria); // Buscamos el username que coincida con el id de la convocatoria\n        return {\n          username: user ? user.username : 'Usuario desconocido',\n          promedio: voto.promedio !== null && voto.promedio !== undefined ? voto.promedio : 0 // Asignar 0 si promedio es undefined o null\n        };\n      });\n\n      setUsers(combinedData); // Guardamos los resultados en el estado\n    }\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Clasificación</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Username</th>\n            <th>Promedio de Puntuación</th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => (\n            <tr key={index}>\n              <td>{user.username}</td>\n              <td>{user.promedio.toFixed(2)}</td> {/* Ahora el promedio siempre será un número */}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default Clasificacion;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}